# coding: utf-8

"""
    RAWG Video Games Database API

     The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you donâ€™t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__.   # noqa: E501

    The version of the OpenAPI document: v1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from rawg.configuration import Configuration


class GamePlatformsInner(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'platform': 'GamePlatformsInnerPlatform',
        'released_at': 'str',
        'requirements': 'GamePlatformsInnerRequirements'
    }

    attribute_map = {
        'platform': 'platform',
        'released_at': 'released_at',
        'requirements': 'requirements'
    }

    def __init__(self, platform=None, released_at=None, requirements=None, local_vars_configuration=None):  # noqa: E501
        """GamePlatformsInner - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._platform = None
        self._released_at = None
        self._requirements = None
        self.discriminator = None

        if platform is not None:
            self.platform = platform
        self.released_at = released_at
        self.requirements = requirements

    @property
    def platform(self):
        """Gets the platform of this GamePlatformsInner.  # noqa: E501


        :return: The platform of this GamePlatformsInner.  # noqa: E501
        :rtype: GamePlatformsInnerPlatform
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this GamePlatformsInner.


        :param platform: The platform of this GamePlatformsInner.  # noqa: E501
        :type platform: GamePlatformsInnerPlatform
        """

        self._platform = platform

    @property
    def released_at(self):
        """Gets the released_at of this GamePlatformsInner.  # noqa: E501


        :return: The released_at of this GamePlatformsInner.  # noqa: E501
        :rtype: str
        """
        return self._released_at

    @released_at.setter
    def released_at(self, released_at):
        """Sets the released_at of this GamePlatformsInner.


        :param released_at: The released_at of this GamePlatformsInner.  # noqa: E501
        :type released_at: str
        """

        self._released_at = released_at

    @property
    def requirements(self):
        """Gets the requirements of this GamePlatformsInner.  # noqa: E501


        :return: The requirements of this GamePlatformsInner.  # noqa: E501
        :rtype: GamePlatformsInnerRequirements
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this GamePlatformsInner.


        :param requirements: The requirements of this GamePlatformsInner.  # noqa: E501
        :type requirements: GamePlatformsInnerRequirements
        """

        self._requirements = requirements

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GamePlatformsInner):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GamePlatformsInner):
            return True

        return self.to_dict() != other.to_dict()
